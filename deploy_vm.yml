---
- hosts: fabrika
  gather_facts: False

  tasks:

    #- fail: msg="please add vm hostname to the ansible-playbook like: ansible-playbook deploy_vm.yml -e hostname=vx2"
    - fail: msg="please add vm hostname to the ansible-playbook like 'ansible-playbook deploy_vm.yml -e hostname=vx2'"
      when: hostname is not defined

    - name: Load Required Variables From File
      include_vars:
        file: variables/{{ hostname }}.yml

    - name: Make sure that we can connect to the machine
      ping:

    - name: Create temporary build directory
      tempfile:
        state: directory
        suffix: build
      register: tempfile_1

    - name: Query IP Address for {{ vm_name }}.{{ vm_domain_name }}
      set_fact: vm_ip="{{ lookup('dig', '{{ vm_name }}.{{ vm_domain_name }}/A') }}"

    - name: Parse IP Address for Short IP
      set_fact: vm_ip_short="{{ vm_ip.split('.')[0:3] | join('.') }}"

    - name: list all VMs {{ vm_ip_kisa }}
      virt:
        command: list_vms
      register: all_vms

    - name: Is Clean Up Required
      set_fact:
        vm_cleanup: "{{ all_vms.list_vms | select('match', vm_name) | list}}"

    #- debug:
    #    var: all_vms.list_vms

    #- debug:
    #    var: vm_cleanup

    - name: stop vm {{ vm_name }}
      virt:
        name: "{{ vm_name }}"
        state: destroyed
      when: vm_cleanup.0 is defined

    - name: undefine vm {{ vm_name }} 
      virt: 
        name: "{{ vm_name }}"
        command: undefine
      when: vm_cleanup.0 is defined

    - name: Create vm base directory if it does not exist
      file:
        path: "{{ vm_dir }}/{{ vm_name }}"
        state: directory
        mode: '0755'

    - name: define vm {{ vm_name }}
      virt:
          command: define
          xml: "{{ lookup('template', 'vm-1Disk.j2') }}"
          uri:  qemu:///session

    - name: Download disk file from S3 Storage
      get_url:
        url: "{{ vm_os_disk_file }}"
        dest: "{{ vm_dir }}/{{ vm_name }}/{{ vm_name }}-vda-{{ vm_disk_size }}.qcow2"
        mode: '0644'

#    - name: Copy vm disk image file
#      copy: 
#        src: "{{ vm_os_disk_file }}"
#        dest: "{{ vm_dir }}/{{ vm_name }}/{{ vm_name }}-vda-{{ vm_disk_size }}.qcow2"
#        force: yes  
#        remote_src: yes

    - name: Resize vm disk file
      command: qemu-img resize "{{ vm_dir }}/{{ vm_name }}/{{ vm_name }}-vda-{{ vm_disk_size }}.qcow2" {{ vm_disk_size }}G

    - name: Generate netplan files
      template:
        src: "templates/netplan.j2"
        dest: "{{ tempfile_1.path }}/01-netcfg.yaml"
      when: 
        - vm_os_type|string == 'ubuntu'
        - vm_os_version|string == '1804'

    - name: Generate hosts files
      template:
        src: "templates/hosts.ubuntu.j2"
        dest: "{{ tempfile_1.path }}/hosts"
      when: 
        - vm_os_type|string == 'ubuntu'

    - name: Generate hosts files
      template:
        src: "templates/hostname.ubuntu.j2"
        dest: "{{ tempfile_1.path }}/hostname"
      when: 
        - vm_os_type|string == 'ubuntu'

    - name: Create temp directory for vm's ssh keys
      file:
        path: "{{ tempfile_1.path }}/.ssh"
        state: directory
        mode: '0755'

    - name: Generate SSH Keys for vm 
      openssh_keypair:
        path: "{{ tempfile_1.path }}/id_ssh_rsa"
        comment: "root@{{ vm_name }}.{{ vm_domain_name }}"
        size: 2048
 
    - name: Copy Netplan and Hosts Files to vm
      command: virt-customize -a "{{ vm_dir }}/{{ vm_name }}/{{ vm_name }}-vda-{{ vm_disk_size }}.qcow2" --upload {{ tempfile_1.path }}/01-netcfg.yaml:/etc/netplan --upload {{ tempfile_1.path }}/hosts:/etc --upload {{ tempfile_1.path }}/hostname:/etc 
      when: 
        - vm_os_type|string == 'ubuntu'
        - vm_os_version|string == '1804'

    - name: Copy SSH Keys into VM
      command: virt-customize -a "{{ vm_dir }}/{{ vm_name }}/{{ vm_name }}-vda-{{ vm_disk_size }}.qcow2" --upload {{ tempfile_1.path }}/id_ssh_rsa:/root/.ssh --upload {{ tempfile_1.path }}/id_ssh_rsa.pub:/root/.ssh

    - name: start vm {{ vm_name }}
      virt:
        name: "{{ vm_name }}"
        state: running

    - name: Clean Up temp directory
      file:
        path: "{{ tempfile_1.path }}"
        state: absent

